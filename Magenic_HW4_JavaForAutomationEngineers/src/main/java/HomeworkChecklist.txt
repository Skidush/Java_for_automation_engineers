TODO HOMEWORK CHECKLIST:
PROGRAMMING TASKS:
    SongDatabase.java
        [X] Complete the 'addSong' method
        [X] Throw an IllegalArgumentException when a playlist of the given name already exists in the 'createPlaylist' method
        [X] Complete the 'getPlaylist' method
        [X] Complete the 'addSongToPlaylist' method
        [X] Complete the 'findSongByName' method
        [X] Complete the 'findSongByArtist' method
    MP3Player.java
        [X] Run the 'main' method and try multiple work flows

TEST TASKS:
    SongDatabaseTest.java
        [X] Write the 'testAddDeleteSong' test method
        [X] Write the 'testAddGetDeletePlaylist' test method
        [X] Run every other test

SHORT ANSWERS:
    // TODO FOR HOMEWORK: Answer each question, and note many don't have a 'right answer' so just answer honestly
    [X] The MP3Player is a console application, what features do you wish were added?
        // ANSWER HERE: Viewing the list of songs and list of songs in a playlist.

    [X] Pick any feature you mentioned in the last question. Do you think you could implement that feature with your current knowledge? If yes explain the basic thought processing of adding that feature, if not explain why.
        // ANSWER HERE: Yes

    [X] What is a loop?
        // ANSWER HERE: A programming structure that would repeat until a condition is met.

    [X] Write what each of these loops does in your own words:
        // FOR LOOP: Loop for a number of times or until a condition is met.
        // WHILE LOOP: While the condition isn't met, loop the code.
        // DO WHILE: Execute the code then check for the condition for looping the code.

    [X] Why were 'infinite loops' used in this project? (See UserHelperMethods.displayOptionsAndWaitForValidOption(String[] options) for a reference)
        // ANSWER HERE: For validation. To ensure that the user could only exit the program through the execution of the correct steps.

    [X] This project has 3 packages (models, resources, and utils). Describe each one.
        // MODELS: Contains the existing classes/objects.
        // RESOURCES: Contains data for the program.
        // UTILS: Contains universal helpers for the program.